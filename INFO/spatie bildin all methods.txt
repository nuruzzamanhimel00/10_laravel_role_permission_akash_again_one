#################### je sob comand sikci COMAND #################
1) composer du
2) php artisan optimize:clear
3)php artisan permission:cache-reset

// cache clear command
 php artisan optimize:clear
 # or
 php artisan config:clear

############################## laravel role permission spatie Buildin Method ##################################
##### spatie  install first time #####
** Prerequisites:--
==> User Model / Contract/Interface:-
use Illuminate\Foundation\Auth\User as Authenticatable;
use Spatie\Permission\Traits\HasRoles;

class User extends Authenticatable
{
    use HasRoles;

    // ...
}
** install in laravel:--
==>  composer require spatie/laravel-permission
==>
'providers' => [
    // ...
    Spatie\Permission\PermissionServiceProvider::class,
];
==> php artisan vendor:publish --provider="Spatie\Permission\PermissionServiceProvider"
==>  php artisan migrate

### ( 1 ) Role & Permission ###
$role = Role::create(['name' => 'writer']);
$permission = Permission::create(['name' => 'edit articles']);

A permission can be assigned to a role using 1 of these methods:
$role->givePermissionTo($permission);
$permission->assignRole($role);

Multiple permissions can be synced to a role using 1 of these methods:
$role->syncPermissions($permissions);
$permission->syncRoles($roles);

### FInd Role 
 $role = Role::findById($request->id);

=>A role have many permissions: ( RELATIONSHIP )
 $roles = Role::with(['permissions'])->get();
foreach($$roles as $$role)
{ $role->permission }

==> Role create and role have many permissions
 $roleCreate = Role::create(['name'=>$request->name]);
//here role have many permissions
$roleCreate->syncPermissions($permissions);



#### ( 2 ) Using permissio via rol

==>  user Assign multiple role
 $user->assignRole($request->roles);

==> user role check 
$user->hasRole($role->name)

==> user role remove
 foreach(Role::all() as $role){
          $user->removeRole($role->name);
 }

==> user wise role name find and delete role

  foreach($user->getRoleNames()as $role_name){
            $user->removeRole($role_name);
        }

==> // All current roles will be removed from the user 
 $admin = Admin::find($id);
$admin->roles()->detach();


==> Role data find by id 
1)   $role = Role::findById($id);

==> Role er permission name wise permission check 
{{ $role->hasPermissionTo($permission->name) ? 'checked' : '' }}



===> update role permission
$role = Role::findById($id);
$role->update(['name'=>$request->name])
$role->syncPermissions($permissions);


=====> single role permissions relation
1) $role->permissions
here , >permissions is  relation name


========================================

15

In your Model that uses the Spatie\Permission\Traits\HasRoles trait, which is in most cases User, you can call various methods for verifying or retrieving roles.
They are:

roles
hasRole
hasAnyRole
hasAllRoles
getRoleNames
Usage example
For a given user,

$roles = $user->getRoleNames();// Returns a collection

 @forelse ($roles as $role )
     <option value="{{ $role->id }}"
        {{ $user-
($role->name) ? 'selected' : '' }}
           >{{ $role->name }}
               </option>
   @empty
   @endforelse

========================================

### From Documentation : Using Permissions via Roles Section : 
url: https://spatie.be/docs/laravel-permission/v5/basic-usage/role-permissions
# Assigning Roles:
$user->assignRole('writer');

// You can also assign multiple roles at once
$user->assignRole('writer', 'admin');
// or as an array
$user->assignRole(['writer', 'admin']);

A role can be removed from a user:

$user->removeRole('writer');

Roles can also be synced:

// All current roles will be removed from the user and replaced by the array given
$user->syncRoles(['writer', 'admin']);

#Checking Roles
You can determine if a user has a certain role:
$user->hasRole('writer');
// or at least one role from an array of roles:
$user->hasRole(['editor', 'moderator']);

#################### user all role delete spatie #####################
$user = User::find($id);
$user->roles()->detach()
 